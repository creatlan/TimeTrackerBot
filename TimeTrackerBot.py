import logging
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import datetime
import sqlite3


TOKEN = "TOKEN"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# Initializing the logger
logging.basicConfig(level=logging.INFO)

connect = sqlite3.connect('TimeTracker.db')


def base_db(user_id: int, user_name: str):
    conn = sqlite3.connect('TimeTracker.db', timeout=7)
    cursor = conn.cursor()
    cursor.execute(f"SELECT user_id FROM test WHERE user_id = {user_id}")
    data = cursor.fetchone()
    if data is None:
        cursor.execute("""INSERT INTO test (
            user_id,
            user_name
        ) VALUES (?, ?)""", (user_id, user_name))
        conn.commit()
        conn.close()


# START

# Describing user states
class Activity(StatesGroup):
    start = State()
    time = State()
    activity = State()


@dp.message_handler(commands='start')
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    base_db(user_id=user_id, user_name=user_full_name)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏!üëæ")
    await activity_button(message)


@dp.message_handler(state=Activity.start)
async def activity_button(message: types.Message):
    keyboard_activity = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True)
    activity_button1 = types.KeyboardButton(text="Study")
    activity_button2 = types.KeyboardButton(text="Work")
    activity_button3 = types.KeyboardButton(text="Rest")
    activity_button4 = types.KeyboardButton(text="Another")
    keyboard_activity.add(activity_button1, activity_button2, activity_button3, activity_button4)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω—è—Ç—å—Å—è:", reply_markup=keyboard_activity)

    # Changing the user's state to Activity.time
    await Activity.time.set()


def add_activity(activity: str, user_id: int):
    conn = sqlite3.connect('TimeTracker.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE test SET activity = ? WHERE user_id = ?', (f"{activity}", user_id))
    conn.commit()
    conn.close()


def from_activity(user_id: int):
    conn = sqlite3.connect('TimeTracker.db')
    cursor = conn.cursor()
    activity = str(cursor.execute(f"SELECT activity FROM test WHERE user_id={user_id}").fetchone()[0])
    conn.close()
    return activity


def add_time(activity: str, time: int, user_id: int):
    conn = sqlite3.connect('TimeTracker.db')
    cursor = conn.cursor()
    result = cursor.execute(f"SELECT time_{activity} FROM test WHERE user_id = {user_id}").fetchone()
    if result[0] is not None:
        time += int(result[0])
    cursor.execute(f'Update test set time_{activity} = ? where user_id = ?', (time, user_id))
    conn.commit()
    conn.close()


def from_time(activity: str, user_id: int):
    conn = sqlite3.connect('TimeTracker.db')
    cursor = conn.cursor()
    result = cursor.execute(f"SELECT time_{activity} FROM test WHERE user_id = {user_id}").fetchone()
    if result[0] is not None:
        time_activity = int(result[0])
    else:
        time_activity = int(0)
    conn.close()
    return time_activity


@dp.message_handler(state=Activity.time)
async def activity_command(message: types.Message):
    activity = message.text.lower()
    add_activity(activity, int(message.from_user.id))
    from_activ = from_activity(user_id=message.from_user.id)

    if from_activ != 'study' and from_activ != 'work' and from_activ != 'rest' and from_activ != 'another':
        await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ‚¨áÔ∏è")
        await activity_button(message)
    else:
        await time_button(message)


@dp.message_handler(state=Activity.time)
async def time_button(message: types.Message):
    keyboard_time = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True)
    time_button1 = types.KeyboardButton(text="10 –º–∏–Ω")
    time_button2 = types.KeyboardButton(text="20 –º–∏–Ω")
    time_button3 = types.KeyboardButton(text="30 –º–∏–Ω")
    time_button4 = types.KeyboardButton(text="60 –º–∏–Ω")
    keyboard_time.add(time_button1, time_button2, time_button3, time_button4)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ–º—É —É–¥–µ–ª–∏—Ç—å:", reply_markup=keyboard_time)
    await Activity.activity.set()


@dp.message_handler(state=Activity.activity)
async def time_activity(message: types.Message, state: FSMContext):
    time = message.text

    if time != '10 –º–∏–Ω' and time != '20 –º–∏–Ω' and time != '30 –º–∏–Ω' and time != '60 –º–∏–Ω':
        await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ‚¨áÔ∏è")
        await time_button(message)
    else:
        user_id = message.from_user.id
        time = int(message.text.split()[0])
        activity = from_activity(user_id=user_id)
        add_time(activity, time, user_id)

        end_time = datetime.datetime.now() + datetime.timedelta(minutes=time)

        await message.answer(
            f"–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {activity}\n\n–ù–∞—á–∞–ª–æ: {datetime.datetime.now().strftime('%H:%M')}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time.strftime('%H:%M')}")

        # Returning to the initial state
        await state.finish()


def conversation_to_hours(time_activity: int):
    if time_activity > 60 and time_activity % 60 != 0:
        hours = str(time_activity//60)
        minutes = str(time_activity % 60)
        flag = hours + ' —á ' + minutes + ' –º–∏–Ω'
    elif time_activity % 60 == 0:
        hours = str(time_activity//60)
        flag = hours + ' —á'
    else:
        minutes = str(time_activity)
        flag = minutes + ' –º–∏–Ω'
    return flag


# GET_TIME to output the total time spent

@dp.message_handler(commands='get_time')
async def start_get_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    time_study = from_time(activity='study', user_id=user_id)
    time_work = from_time(activity='work', user_id=user_id)
    time_rest = from_time(activity='rest', user_id=user_id)
    time_another = from_time(activity='another', user_id=user_id)
    await message.answer(f"‚è±–í—Å–µ–≥–æ –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å:\n\nStudy = {conversation_to_hours(time_study)}\nWork = {conversation_to_hours(time_work)}\nRest = {conversation_to_hours(time_rest)}\nAnother = {conversation_to_hours(time_another)}")
    await state.finish()


# MOTIVATION to motivate users

class Motivation(StatesGroup):
    reply = State()


@dp.message_handler(commands='motivation')
async def motivation(message: types.Message):
    keyboard_motivation = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True)
    motivation_button1 = types.KeyboardButton(text="–°–æ–≤–µ—Ç—ãüëæ")
    motivation_button2 = types.KeyboardButton(text="–ú–æ—Ç–∏–≤–∞—Ü–∏—èü¶æ")
    motivation_button3 = types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞üíú")
    keyboard_motivation.add(motivation_button1, motivation_button2, motivation_button3)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º —Å–µ–π—á–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞:", reply_markup=keyboard_motivation)
    await Motivation.reply.set()


@dp.message_handler(state=Motivation.reply)
async def reply_command(message: types.Message, state: FSMContext):
    motivation_but = message.text

    if motivation_but != '–°–æ–≤–µ—Ç—ãüëæ' and motivation_but != '–ú–æ—Ç–∏–≤–∞—Ü–∏—èü¶æ' and motivation_but != '–ü–æ–¥–¥–µ—Ä–∂–∫–∞üíú':
        await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ‚¨áÔ∏è")
        await motivation(message)
    elif motivation_but == '–°–æ–≤–µ—Ç—ãüëæ':
        await motivation_but1(message)
    elif motivation_but == '–ú–æ—Ç–∏–≤–∞—Ü–∏—èü¶æ':
        await motivation_but2(message)
    elif motivation_but == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞üíú':
        await motivation_but3(message)
    await state.finish()


ADVICE = [
    "‚è± –ù–∞–ø–æ–º–Ω–∏—Ç–µ —Å–µ–±–µ, –ø–æ—á–µ–º—É –≤—ã –Ω–∞—á–∞–ª–∏ —ç—Ç—É —Ä–∞–±–æ—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –±—ã–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ—Å—Ç–∏—á—å, –∏–ª–∏ –≤—ã –º–µ—á—Ç–∞–ª–∏ –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–∏ —Ü–µ–ª–∏ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.",
    "‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–µ–ª–∏. –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥—É–º–∞—Ç—å –æ –±–æ–ª—å—à–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Ü–µ–ª–∏, –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –≤—ã –¥–≤–∏–∂–µ—Ç–µ—Å—å –≤–ø–µ—Ä–µ–¥ –∏ —á—Ç–æ –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª.",
    "‚è± –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ. –ï—Å–ª–∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ —É –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–∏–ª—ã, –≤–æ–∑—å–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –∏ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å.",
    "‚è± –û–±—â–∞–π—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏. –û–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º–∏, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –∏–¥–µ—è–º–∏, –∏–ª–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "‚è± –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—Ö. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ, –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π —Ü–µ–ª–∏, –Ω–æ–≤–æ–µ —É–º–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
    "‚è± –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º. –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π. –≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º —á–µ—Ç–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ –¥–∞–ª–µ–∫–æ –≤—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –∏ —á—Ç–æ –≤–∞–º –µ—â–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.",
    "‚è± –ù–µ –ø–æ–∑–≤–æ–ª—è–π—Ç–µ —Å–æ–º–Ω–µ–Ω–∏—è–º –∏ —Å—Ç—Ä–∞—Ö–∞–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö. –ò–Ω–æ–≥–¥–∞ –º—ã —Å–∞–º–∏ —Å–µ–±–µ —Å—Ç–∞–≤–∏–º –ø—Ä–µ–≥—Ä–∞–¥—ã –∏ –±–æ–∏–º—Å—è –Ω–µ—É–¥–∞—á–∏. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –æ—à–∏–±–∫–∏ –∏ –Ω–µ—É–¥–∞—á–∏ ‚Äì —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü, –∞ –≤—Å–µ–≥–æ –ª–∏—à—å —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ–º—É, —á—Ç–æ –º–æ—Ç–∏–≤–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, –Ω–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–π—Ç–µ —Å–æ–º–Ω–µ–Ω–∏—è–º –≤–∑—è—Ç—å –≤–µ—Ä—Ö."
]


@dp.message_handler(state=Motivation.reply)
async def motivation_but1(message: types.Message):
    advice = random.choice(ADVICE)
    await message.reply(advice)


QUOTES = [
    "‚ú® –ñ–∏–∑–Ω—å - —ç—Ç–æ –Ω–µ –æ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–±—è. –ñ–∏–∑–Ω—å - —ç—Ç–æ –æ —Ç–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–µ–±—è.",
    "‚ú® –£—Å–ø–µ—Ö - —ç—Ç–æ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏–ª–∏ –Ω–µ–¥–µ–ª–∏. –£—Å–ø–µ—Ö - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —É—Å–∏–ª–∏–π, —É–ø–æ—Ä—Å—Ç–≤–∞ –∏ —Ç—Ä—É–¥–∞.",
    "‚ú® –ë—É–¥—å—Ç–µ —Å–∏–ª—å–Ω—ã –∏ –≤–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è. –ï—Å–ª–∏ –≤—ã –≤–µ—Ä–∏—Ç–µ –≤ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–æ –º–æ–∂–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –ª—é–±—ã—Ö —Ü–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ—Å—Ç–∞–≤–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π.",
    "‚ú® –ù–µ –±–æ–π—Ç–µ—Å—å —Å–≤–æ–∏—Ö –æ—à–∏–±–æ–∫, –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —É—á–∏—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏. –õ—É—á—à–∏–µ —É—Ä–æ–∫–∏ –∂–∏–∑–Ω–∏ –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–≤–æ–∏—Ö –Ω–µ—É–¥–∞—á –∏ –æ—à–∏–±–æ–∫.",
    "‚ú® –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏. –ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.",
    "‚ú® –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏ - —ç—Ç–æ –Ω–µ –±–æ—è—Ç—å—Å—è —Ä–∏—Å–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã–∑–æ–≤—ã. –ù–µ –±–æ–π—Ç–µ—Å—å –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–≤–æ–µ–π –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
    "‚ú® –î–æ–≤–µ—Ä—å—Å—è —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Å–ª—É—à–∞–π —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ. –ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç, –∫–æ–≥–¥–∞ –º—ã –¥–∞–µ–º —Å–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–ª—É—à–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞.",
    "‚ú® –î–∞–∂–µ —Å–∞–º—ã–π –¥–æ–ª–≥–∏–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.",
    "‚ú® –í—Å–µ —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ ‚Äì —ç—Ç–æ –º–µ—á—Ç–∞, –≤–µ—Ä–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ —Ç—Ä—É–¥–∞.",
    "‚ú® –£—Å–ø–µ—Ö ‚Äì —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –æ–¥–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –∫ –¥—Ä—É–≥–æ–π –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
    "‚ú® –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–ø—Ä—è—Ç–∞—Ç—å —Å–≤–æ—é –ª–µ–Ω—å ‚Äì –∑–∞–Ω—è—Ç—å—Å—è –¥–µ–ª–æ–º.",
    "‚ú® –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –Ω–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—ã.",
    "‚ú® –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äì –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ."
]


@dp.message_handler(state=Motivation.reply)
async def motivation_but2(message: types.Message):
    quote = random.choice(QUOTES)
    await message.reply(quote)


SUPPORT = [
    "–í—Ä–µ–º—è –ª–µ—á–∏—Ç –≤—Å–µ —Ä–∞–Ω—ã, –∏ —ç—Ç–æ —Ç–æ–∂–µ –ø—Ä–æ–π–¥–µ—Çüíú",
    "–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤—Å–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏ –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ —á–µ—Ä–µ–∑ –Ω–∏—Öüíú",
    "–£ –≤–∞—Å –µ—Å—Ç—å —Å–∏–ª–∞ –∏ —Ä–µ—Å—É—Ä—Å—ã, —á—Ç–æ–±—ã –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —ç—Ç–æ. –ü—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏—Ç–µ—Å—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–¥—Ç–∏ –≤–ø–µ—Ä–µ–¥üíú",
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–µ–æ–¥–æ–ª–µ–ª–∏ –º–Ω–æ–≥–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –∏ —ç—Ç—Éüíú",
    "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å —Ç—Ä—É–¥–Ω–æ, –Ω–æ —è –≤–µ—Ä—é –≤ –≤–∞—Å –∏ –∑–Ω–∞—é, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —ç—Ç–æüíú",
    "–í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –≤ —Å–≤–æ–µ–π –±–æ—Ä—å–±–µ. –Ø –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Åüíú",
    "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µüíú",
    "–ù–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ —Å—É–¥–∏—Ç–µ —Å–µ–±—è –∑–∞ –ø—Ä–æ—à–ª—ã–µ –æ—à–∏–±–∫–∏. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –¥–∞–≤–∞–π—Ç–µ —Å—Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º –∏ –±—É–¥—É—â–µ–º, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —É—Å–ø–µ—Ö–∞üíú",
    "–í—ã –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã, –∏ —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π. –î–∞–≤–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —É—Å–ø–µ—Ö–∞üíú",
    "–Ø –∑–Ω–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ç–æ–Ω–Ω–µ–ª—è, –Ω–æ –º—ã —Å–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤–º–µ—Å—Ç–µ –∏ –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–∏–ª—å–Ω–µ–µ –∏ –º—É–¥—Ä–µ–µüíú"
]


@dp.message_handler(state=Motivation.reply)
async def motivation_but3(message: types.Message):
    support = random.choice(SUPPORT)
    await message.reply(support)


@dp.message_handler(commands='help')
async def help_command(message: types.Message, state: FSMContext):
    user_full_name = message.from_user.full_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                         f"/start - –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
                         f"/get_time - –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
                         f"/motivation - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∫ —Ä–∞–±–æ—Ç–µ")
    await state.finish()


# Handler for user activity input
if __name__ == '__main__':
    # Launching long-polling
    executor.start_polling(dp)
